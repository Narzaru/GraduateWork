#ifndef SERIAL_PROTOCOL_DEFINES_H_
#define SERIAL_PROTOCOL_DEFINES_H_
namespace protocol {
struct Position {
  float x;
  float y;
};

struct Motor {
  byte id;
  Position position;
};

#define PROTOCOL_MESSAGE_LENGTH 9
union Payload {
  Motor motor;
  char message[PROTOCOL_MESSAGE_LENGTH];
};

struct Data {
  uint8_t command;
  Payload payload;
};

// Limits. Limits are in bytes.
#define PROTOCOL_LIMITS_PACKET_LENGTH 10
#define PROTOCOL_LIMITS_COMMAND_LENGTH 1
#define PROTOCOL_LIMITS_PAYLOAD_LENGTH 9
#define PROTOCOL_LIMITS_PAYLOAD_MOTOR_ID_LENGTH 1
#define PROTOCOL_LIMITS_PAYLOAD_MOTOR_POSITION_X_LENGTH 4
#define PROTOCOL_LIMITS_PAYLOAD_MOTOR_POSITION_Y_LENGTH 4
#define PROTOCOL_LIMITS_PAYLOAD_MESSAGE_LENGTH PROTOCOL_MESSAGE_LENGTH

// Commands.
#define PROTOCOL_COMMAND_MESSAGE '!'
#define PROTOCOL_COMMAND_ECHO 'W'
#define PROTOCOL_COMMAND_SET_POSITION_TO 'S'
#define PROTOCOL_COMMAND_SET_POSITION_TO_COMPLETED 's'
#define PROTOCOL_COMMAND_MOVE 'M'
#define PROTOCOL_COMMAND_MOVE_COMPLETED 'm'
#define PROTOCOL_COMMAND_ERROR 'E'

// Offsets of the packet.
#define PROTOCOL_OFFSETS_COMMAND 0x00
#define PROTOCOL_OFFSETS_PAYLOAD 0x01
#define PROTOCOL_OFFSETS_PAYLOAD_MESSAGE 0x01
#define PROTOCOL_OFFSETS_PAYLOAD_MOTOR_ID 0x01
#define PROTOCOL_OFFSETS_PAYLOAD_MOTOR_POSITION_X 0x02
#define PROTOCOL_OFFSETS_PAYLOAD_MOTOR_POSITION_Y 0x06
}
#endif  // SERIAL_PROTOCOL_DEFINES_
